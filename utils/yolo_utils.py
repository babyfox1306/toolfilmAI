import os
import sys
import torch
import subprocess
import importlib
import shutil
from pathlib import Path

# TryExcept class m√† YOLOv5 ƒëang t√¨m ki·∫øm nh∆∞ng kh√¥ng t√¨m th·∫•y
class TryExcept:
    """
    Class t∆∞∆°ng th√≠ch v·ªõi YOLOv5 ƒë·ªÉ gi·∫£i quy·∫øt l·ªói import
    """
    def __init__(self, *args, **kwargs):
        pass
        
    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_val, exc_tb):
        pass

# Th√™m v√†o sys.modules ƒë·ªÉ ƒë·∫£m b·∫£o c√≥ th·ªÉ import
# T·∫°o module utils n·∫øu ch∆∞a c√≥
if 'utils' not in sys.modules:
    sys.modules['utils'] = type('', (), {})()
    
# Th√™m TryExcept v√†o module utils
sys.modules['utils'].TryExcept = TryExcept

def fix_yolo5_imports():
    """S·ª≠a l·ªói import YOLOv5"""
    try:
        # C√°ch 1: Ki·ªÉm tra n·∫øu YOLOv5 ƒë√£ ƒë∆∞·ª£c c√†i qua pip
        try:
            import yolov5
            print("‚úÖ S·ª≠ d·ª•ng YOLOv5 t·ª´ pip package")
            return True
        except ImportError:
            print("‚ö†Ô∏è YOLOv5 ch∆∞a ƒë∆∞·ª£c c√†i qua pip, th·ª≠ ph∆∞∆°ng ph√°p kh√°c...")
            
        # C√°ch 2: S·ª≠ d·ª•ng th∆∞ m·ª•c YOLOv5 local
        yolov5_dir = Path("yolov5")
        if not yolov5_dir.exists():
            print("üîç Th∆∞ m·ª•c YOLOv5 kh√¥ng t·ªìn t·∫°i, ƒëang t·∫£i v·ªÅ...")
            try:
                subprocess.run(
                    ["git", "clone", "https://github.com/ultralytics/yolov5", str(yolov5_dir)],
                    stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
                )
                print("‚úÖ ƒê√£ t·∫£i YOLOv5 t·ª´ GitHub")
            except Exception as e:
                print(f"‚ö†Ô∏è Kh√¥ng th·ªÉ clone repository: {e}")
                print("ƒêang t·∫£i ZIP file...")
                
                # D√πng ph∆∞∆°ng ph√°p t·∫£i ZIP thay th·∫ø
                import urllib.request
                import zipfile
                try:
                    zip_url = "https://github.com/ultralytics/yolov5/archive/refs/heads/master.zip"
                    zip_path = "yolov5-master.zip"
                    urllib.request.urlretrieve(zip_url, zip_path)
                    
                    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                        zip_ref.extractall(".")
                        
                    if os.path.exists("yolov5-master"):
                        os.rename("yolov5-master", "yolov5")
                        
                    if os.path.exists(zip_path):
                        os.remove(zip_path)
                        
                    print("‚úÖ ƒê√£ t·∫£i v√† gi·∫£i n√©n YOLOv5")
                except Exception as e2:
                    print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i ZIP: {e2}")
                    # Th·ª≠ c√†i ƒë·∫∑t qua pip l√†m ph∆∞∆°ng √°n cu·ªëi
                    try:
                        subprocess.run(
                            [sys.executable, "-m", "pip", "install", "yolov5"],
                            stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
                        )
                        print("‚úÖ ƒê√£ c√†i ƒë·∫∑t YOLOv5 qua pip")
                        import yolov5
                        return True
                    except Exception as e3:
                        print(f"‚ùå Kh√¥ng th·ªÉ c√†i ƒë·∫∑t YOLOv5: {e3}")
                        return False
        
        # Th√™m th∆∞ m·ª•c YOLOv5 v√†o sys.path
        yolov5_path = str(yolov5_dir.absolute())
        if yolov5_path not in sys.path:
            sys.path.insert(0, yolov5_path)
            print(f"‚úÖ ƒê√£ th√™m {yolov5_path} v√†o sys.path")
        
        # Th√™m c√°c module gi·∫£ ƒë·ªÉ thay th·∫ø
        try:
            # Ki·ªÉm tra xem c√≥ th·ªÉ import ƒë∆∞·ª£c c√°c module c·∫ßn thi·∫øt kh√¥ng
            # CH√ö √ù: Ph·∫£i import ƒë·∫ßy ƒë·ªß t·ª´ yolov5
            from yolov5.models import common
            from yolov5.utils import torch_utils
            print("‚úÖ ƒê√£ import th√†nh c√¥ng modules t·ª´ YOLOv5 local")
            return True
        except ImportError as e:
            print(f"‚ö†Ô∏è V·∫´n c√≤n l·ªói import: {e}")
            # T·∫°o c√°c module ·∫£o
            sys.modules['models'] = type('', (), {})()
            sys.modules['models.common'] = type('', (), {})()
            sys.modules['utils.torch_utils'] = type('', (), {})()
            print("‚ö†Ô∏è ƒê√£ t·∫°o c√°c module ·∫£o, c√≥ th·ªÉ g·∫∑p l·ªói khi ch·∫°y")
            return False
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
        return False

def initialize_yolo5_model(weights="yolov5s.pt", device="cuda"):
    """Kh·ªüi t·∫°o model YOLOv5"""
    print(f"üîç ƒêang kh·ªüi t·∫°o model YOLOv5 t·ª´ {weights}...")
    
    # Ki·ªÉm tra file weights
    weights_path = weights
    
    # Ki·ªÉm tra trong th∆∞ m·ª•c models tr∆∞·ªõc
    models_dir = Path("models")
    if models_dir.exists():
        model_in_dir = models_dir / Path(weights).name
        if model_in_dir.exists():
            print(f"‚úÖ ƒê√£ t√¨m th·∫•y model trong th∆∞ m·ª•c models: {model_in_dir}")
            weights_path = str(model_in_dir)
    
    # Ph∆∞∆°ng ph√°p 1: S·ª≠ d·ª•ng pip package (∆∞u ti√™n)
    try:
        import yolov5
        model = yolov5.load(weights_path, device=device)
        print(f"‚úÖ ƒê√£ t·∫£i model th√†nh c√¥ng qua pip package")
        return model
    except ImportError:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y package yolov5, ƒëang th·ª≠ ph∆∞∆°ng ph√°p kh√°c...")
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi t·∫£i model qua pip: {e}")
    
    # Ph∆∞∆°ng ph√°p 2: S·ª≠ d·ª•ng torch.hub
    try:
        model = torch.hub.load('ultralytics/yolov5', 'custom', path=weights_path, device=device)
        print(f"‚úÖ ƒê√£ t·∫£i model th√†nh c√¥ng qua torch.hub")
        return model
    except Exception as e:
        print(f"‚ö†Ô∏è L·ªói khi t·∫£i model qua torch.hub: {e}")
    
    # Ph∆∞∆°ng ph√°p 3: Import tr·ª±c ti·∫øp
    try:
        # ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n ƒë∆∞·ª£c thi·∫øt l·∫≠p
        fix_yolo5_imports()
        
        # Th·ª≠ import c√°c module c·∫ßn thi·∫øt t·ª´ th∆∞ m·ª•c local
        try:
            from yolov5.models.common import AutoShape
            from yolov5.models.experimental import attempt_load
            from yolov5.utils.torch_utils import select_device
            
            # Kh·ªüi t·∫°o model
            device_obj = select_device(device)
            model = attempt_load(weights_path, device=device_obj)
            model = AutoShape(model)
            
            print(f"‚úÖ ƒê√£ t·∫£i model th√†nh c√¥ng t·ª´ local YOLOv5")
            return model
        except ImportError as e:
            print(f"‚ö†Ô∏è L·ªói import t·ª´ local YOLOv5: {e}")
            
        # Th·ª≠ c√†i ƒë·∫∑t v√† import l·∫°i
        try:
            subprocess.run(
                [sys.executable, "-m", "pip", "install", "yolov5"],
                stdout=subprocess.PIPE, stderr=subprocess.PIPE, check=True
            )
            import yolov5
            model = yolov5.load(weights_path, device=device)
            print(f"‚úÖ ƒê√£ t·∫£i model sau khi c√†i ƒë·∫∑t yolov5")
            return model
        except Exception as e:
            print(f"‚ùå Kh√¥ng th·ªÉ t·∫£i model sau nhi·ªÅu n·ªó l·ª±c: {e}")
    
    except Exception as e:
        print(f"‚ùå L·ªói kh√¥ng mong ƒë·ª£i: {e}")
    
    return None

def detect_objects_with_yolo5(image, model=None, classes=None, conf=0.25):
    """
    Ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng trong h√¨nh ·∫£nh s·ª≠ d·ª•ng YOLOv5
    
    Args:
        image: Numpy array ch·ª©a ·∫£nh (BGR)
        model: YOLOv5 model (n·∫øu None, s·∫Ω t·ª± ƒë·ªông t·∫£i)
        classes: Danh s√°ch c√°c class c·∫ßn ph√°t hi·ªán (None ƒë·ªÉ ph√°t hi·ªán t·∫•t c·∫£)
        conf: Ng∆∞·ª°ng tin c·∫≠y
    
    Returns:
        List of [x1, y1, x2, y2, confidence, class_id]
    """
    if model is None:
        model = initialize_yolo5_model()
        if model is None:
            return []
    
    # Thi·∫øt l·∫≠p c√°c th√¥ng s·ªë
    model.conf = conf
    model.classes = classes
    
    # Th·ª±c hi·ªán d·ª± ƒëo√°n
    results = model(image)
    
    # Convert k·∫øt qu·∫£ th√†nh format d·ªÖ s·ª≠ d·ª•ng
    detections = []
    
    if hasattr(results, 'xyxy'):
        # YOLOv5 from torch hub
        boxes = results.xyxy[0]  # Tensor format
        for box in boxes:
            # Format: [x1, y1, x2, y2, confidence, class]
            detections.append(box.cpu().numpy().tolist())
    else:
        # YOLOv5 from direct import
        try:
            boxes = results.pandas().xyxy[0]  # DataFrame format
            for _, box in boxes.iterrows():
                detection = [
                    box['xmin'], box['ymin'], box['xmax'], box['ymax'],
                    box['confidence'], box['class']
                ]
                detections.append(detection)
        except Exception:
            try:
                # Try another format
                boxes = results.pred[0]  # Tensor format
                for box in boxes:
                    detections.append(box.cpu().numpy().tolist())
            except Exception as e:
                print(f"‚ùå L·ªói khi x·ª≠ l√Ω k·∫øt qu·∫£ YOLOv5: {e}")
    
    return detections
